@page "/poster/{QuestionToken}"
@using Goldie.Data;
@using Goldie.Services;
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavManager
@inject AnswerService AnswerService
@inject PlayerService PlayerService
@inject QuestionService QuestionService

<PageTitle>Welcome to Goldies</PageTitle>

<PlayerAuth QuestionToken="@QuestionToken" Player="@Player"></PlayerAuth>

<p>I have a question...</p>

@if(Question != null)
{
    <h4>@Question.QuestionText</h4>

    @if(Player.Answers.Where(x => x.QuestionId == Question.QuestionId).Count() >= 1)
    {
        <div class="alert alert-warning">
            <p>You already answered this one! Keep looking for more posters.</p>
        </div>        
    }
    else if (FormSubmitted)
    {
        <Loading></Loading>
    }
    else
    {
        <EditForm Model="Answer" OnValidSubmit="@Submit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-12">
                    <div class="mb-3">
                        <label class="form-label mb-3">Answer:</label>
                        <br />
                        <InputRadioGroup @bind-Value="Answer!.Choice">
                            <div class="row">
                                <div class="col-6">
                                    <div class="form-check form-check-inline">
                                        <InputRadio class="form-check-input" Value="@Question.Choice1" id="Choice1" />
                                        <label class="form-check-label" for="Choice1"> @Question.Choice1</label>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="form-check form-check-inline">
                                        <InputRadio class="form-check-input" Value="@Question.Choice2" id="Choice2" />
                                        <label class="form-check-label" for="Choice2"> @Question.Choice2</label>
                                    </div>
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-6">
                                    <div class="form-check form-check-inline">
                                        <InputRadio class="form-check-input" Value="@Question.Choice3" id="Choice3" />
                                        <label class="form-check-label" for="Choice3"> @Question.Choice3</label>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="form-check form-check-inline">
                                        <InputRadio class="form-check-input" Value="@Question.Choice4" id="Choice4" />
                                        <label class="form-check-label" for="Choice4"> @Question.Choice4</label>
                                    </div>
                                </div>
                            </div>

                        </InputRadioGroup>
                    </div>
                </div>
            </div>

            <div class="row mt-3">
                <div class="col mb-3 text-center">
                    <input type="submit" class="btn btn-success w-100" value="Submit" />
                </div>
            </div>
        </EditForm>
    }    
}

@code {
    [Parameter]
    public string QuestionToken { get; set; } = string.Empty;

    public Player? Player { get; set; }

    public Question? Question { get; set; }

    public Answer? Answer { get; set; }

    public bool FormSubmitted { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var value = await ReadCookies();

            if (int.TryParse(value, out int playerId))
            {                
                Player = await PlayerService.GetPlayerById(playerId);

                if (Player != null && Player.Answers.Count == 14)
                {
                    NavManager.NavigateTo("/submitted");
                }


                Question = await QuestionService.GetQuestionAsync(QuestionToken);

                Answer = new Answer() { QuestionId = Question.QuestionId, PlayerId = Player.PlayerId };

                StateHasChanged();
            }

            if (string.IsNullOrEmpty(value) || Player == null)
            {
                NavManager.NavigateTo($"/?qt={QuestionToken}");
            }
        }
    }

    public async Task Submit()
    {
        FormSubmitted = true;

        var answerSaved = await AnswerService.SubmitAnswerAsync(Answer);

        NavManager.NavigateTo("/submitted");
    }

    protected async Task<string> ReadCookies()
    {

        return await JsRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "playerId");

    }
}
